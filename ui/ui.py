import streamlit as st
from PIL import Image  # used to print and edit images
from groq import Groq
import openai
import os
import requests
from dotenv import load_dotenv
from openai import OpenAI

# === ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤ API Key ‡∏à‡∏≤‡∏Å .env ===
load_dotenv()
groq_client = Groq(api_key=os.getenv("GROQ_API_KEY"))
openai_api_key = os.getenv("OPENAI_API_KEY")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö API Key
if not openai_api_key:
    print("API Key is missing from .env")
else:
    print("API Key loaded successfully")

# === ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Layout ‡∏Ç‡∏≠‡∏á Streamlit ===
st.set_page_config(
    page_title="‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß",
    page_icon="üåç",
    layout="wide",
)

# === ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å URL ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á ===
background_image_url = "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô_‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥.png"

st.markdown(
    """
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <style>
    .stApp {
        background-size: cover;
        background-attachment: fixed;
        background-position: center;
    }
    </style>
    """,
    unsafe_allow_html=True,
)

# === ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ===
st.markdown("<h1 style='text-align: center;'>üåü ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß</h1>", unsafe_allow_html=True)

# === ‡∏™‡πà‡∏ß‡∏ô UI ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===
st.markdown('<div class="search-container">', unsafe_allow_html=True)

col1, col2, col3, col4, col5 = st.columns([2, 2, 2, 2, 1])

with col1:
    st.markdown("<i class='bi bi-geo-alt'></i> Where to?", unsafe_allow_html=True)
    province = st.selectbox("", ["‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô", "‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°", "‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä", "‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå", "‡πÄ‡∏•‡∏¢"])

with col2:
    st.markdown("<i class='bi bi-calendar'></i> Days", unsafe_allow_html=True)
    days = st.number_input("", min_value=1, step=1, value=3, format="%d")

with col3:
    st.markdown("<i class='bi bi-compass'></i> Type", unsafe_allow_html=True)
    activity_type = st.selectbox("", ["‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥", "‡πÄ‡∏°‡∏∑‡∏≠‡∏á", "‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°", "‡πÄ‡∏≠‡∏Å‡∏ã‡πå‡∏ï‡∏£‡∏µ‡∏°", "‡∏ä‡∏¥‡∏• ‡πÜ ‡∏Ñ‡∏≤‡πÄ‡∏ü‡πà"])

with col4:
    st.markdown("<i class='bi bi-cash'></i> Price", unsafe_allow_html=True)
    budget = st.number_input("", min_value=0, step=100, value=5000, format="%d")

with col5:
     search = st.markdown("<button style='width:100%;padding:5px;border:none;background:gray;color:white;border-radius:5px;'><i class='bi bi-search'></i></button>", unsafe_allow_html=True)

st.markdown('</div>', unsafe_allow_html=True)

# === ‡∏õ‡∏∏‡πà‡∏°‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ===
if search:
    with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•..."):
        try:
            # === ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Groq ===
            query = f"""
            ‡∏ä‡πà‡∏ß‡∏¢‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province} 
            ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {days} ‡∏ß‡∏±‡∏ô ‡∏á‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì {budget} ‡∏ö‡∏≤‡∏ó 
            ‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {activity_type}
            """
            chat_completion = groq_client.chat.completions.create(
                messages=[{"role": "user", "content": query}],
                model="llama-3.1-70b-versatile",
            )

            # === ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß ===
            st.markdown('<div class="info-box">', unsafe_allow_html=True)
            st.subheader("‚ú® ‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
            st.success(chat_completion.choices[0].message.content)
            st.markdown('</div>', unsafe_allow_html=True)

            # === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û ===
            with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà..."):
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á prompt ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏à‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                prompt = f"""
                ‡∏†‡∏≤‡∏û‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î {province} 
                ‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß {activity_type} 
                ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤ {days} ‡∏ß‡∏±‡∏ô
                """
                client = OpenAI(api_key=openai_api_key)

                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å OpenAI API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                generation_response = client.images.generate(
                    model="dall-e-3",
                    prompt=prompt,
                    n=1,
                    size="1024x1792",
                )

                # ‡∏î‡∏∂‡∏á URL ‡∏Ç‡∏≠‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
                image_url = generation_response.data[0].url
                st.image(image_url, caption=f"‡∏†‡∏≤‡∏û‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ô {province} ({activity_type})")

                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
                background_image_path = "‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô_‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥.png"
                response = requests.get(image_url)
                with open(background_image_path, 'wb') as f:
                    f.write(response.content)

        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î: {e}")


# === ‡∏™‡πà‡∏ß‡∏ô‡∏ó‡πâ‡∏≤‡∏¢‡πÄ‡∏ß‡πá‡∏ö‡πÑ‡∏ã‡∏ï‡πå ===
st.markdown(
    """
    <hr style="border: 1px solid #ccc;">
    <footer style="text-align: center; color: #777; font-size: 0.9rem;">
        ¬© 2025 ‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡πà‡∏≠‡∏á‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß | ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ Yuki
    </footer>
    """,
    unsafe_allow_html=True,
)

